datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(uuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password         Password?
  reports          Report[]
  places           Place[]
  journeyTemplates JourneyTemplate[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Report {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  journeys Journey[]
}

model Place {
  id      String @id @default(uuid())
  name    String
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model JourneyTemplate {
  id          String @id @default(uuid())
  name        String
  description String
  from        String
  to          String
  distance    Int // Stored as tenths of a mile
  tolls       Int // Stored as cents

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Journey {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  description String
  from        String
  to          String
  distance    Int // Stored as tenths of a mile
  tolls       Int // Stored as cents

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportId String
}
